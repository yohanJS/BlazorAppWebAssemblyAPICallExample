@page "/nasaapi"
@using BlazorAppWebAssembly.Models
@inject HttpClient client

<PageTitle>NASA API</PageTitle>


<div class="container mb-3">
    <div class="row justify-content-center">
        <div class="col-md-6 border border-2 p-3 rounded bg-light">
            <h4 class="mt-3 mb-3">Start finding photos of Mars</h4>
            <p>Curiosity, Opportunity, and Spirit</p>
            <form>
                <div class="mb-3">
                    <label class="form-label">Rover name</label>
                    <input type="text" class="form-control" placeholder="Curiosity, Opportunity, and Spirit" @bind-value="@roverName" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Sol number</label>
                    <input type="text" class="form-control" placeholder="Search by sol (1, 5, 25).." @bind-value="@solNumber" />
                </div>
                <button type="button" class="btn btn-outline-info btn-block mb-3" @onclick="Search">Search</button>
                <button type="button" class="btn btn-outline-danger btn-block mb-3" @onclick="ClearFields">Reset</button>
                <br />
                <span class="text-primary">@searching</span>
                <br />
                <span class="alert-danger rounded m-1" role="alert">@roverNameEmpty</span>
                <br />
                <span class="alert-danger rounded m-1" role="alert">@solNumberEmpty</span>
            </form>
        </div>
    </div>
</div>


@if (sampleResponse == null)
{
    <div class="row justify-content-center">
        <div class="col-md-6">
            <p class="alert alert-danger" role="alert">@userMessage</p>
        </div>
    </div>
}
else
{
    @if (sampleResponse.rover != null)
    {
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Attribute</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Rover name</td>
                    <td>@sampleResponse.rover.name</td>
                </tr>
                <tr>
                    <td>Earth date</td>
                    <td>@sampleResponse.earth_date</td>
                </tr>
                <tr>
                    <td>Landing date</td>
                    <td>@sampleResponse.rover.landing_date</td>
                </tr>
                <tr>
                    <td>Launch date</td>
                    <td>@sampleResponse.rover.launch_date</td>
                </tr>
                <tr>
                    <td>Total photos</td>
                    <td>@sampleResponse.rover.total_photos</td>
                </tr>
            </tbody>
        </table>
        <div class="accordion" id="camerasAccordion">
            <div class="accordion-item">
                <h2 class="accordion-header" id="camerasHeader">
                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#camerasCollapse" aria-expanded="true" aria-controls="camerasCollapse">
                        Rover's Cameras
                    </button>
                </h2>
                <div id="camerasCollapse" class="accordion-collapse collapse" aria-labelledby="camerasHeader" data-bs-parent="#camerasAccordion">
                    <div class="accordion-body">
                        <ul>
                            @if (sampleResponse.rover.cameras != null)
                            {
                                foreach (var camera in sampleResponse.rover.cameras)
                                {
                                    <li class="list-group">@camera.full_name</li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
}

@if (images.Any() && cameras.Any())
{
    <div id="imageCarousel" class="carousel slide mt-3 p-5 bg-dark" data-bs-ride="carousel" data-bs-interval="3000">
        <div class="carousel-inner">
            @foreach (var (image, camera) in images.Zip(cameras, (img, cam) => (img, cam)))
            {
                <div class="carousel-item @(image == images.First() ? "active" : "")">
                    <div class="d-flex flex-column align-items-center">
                        <img src="@image.img_src" class="img-fluid rounded mx-auto d-block" alt="Image">
                        <div class="bg-danger text-white text-center mt-2 p-2 rounded">@camera?.full_name</div>
                    </div>
                </div>
            }
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#imageCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#imageCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>
}


@code {

    Photos? sampleResponse = new Photos();
    public List<Camera?> cameras = new List<Camera?>();
    public List<Image> images = new List<Image>();

    public string roverName = string.Empty;
    public string? solNumber = string.Empty;
    public string roverNameEmpty = string.Empty;
    public string? solNumberEmpty = string.Empty;
    public string? searching = string.Empty;

    public string baseUri = "https://api.nasa.gov/mars-photos/api/v1/rovers/";
    public string apiKey = "9hImHQqhXffBiL6d3Cw7el1PeHUbYflXUjmnW7wS";

    public string errorMessage = string.Empty;
    public string userMessage = "No data found. Try another Sol.";

    private async Task Search()
    {
        // Reset error messages
        roverNameEmpty = string.Empty;
        solNumberEmpty = string.Empty;

        if (string.IsNullOrEmpty(roverName))
        {
            roverNameEmpty = "A Rover name must be entered.";
        }

        if (string.IsNullOrEmpty(solNumber))
        {
            solNumberEmpty = "A Sol number must be entered.";
        }

        // Check if there are any validation errors
        if (string.IsNullOrEmpty(roverNameEmpty) && string.IsNullOrEmpty(solNumberEmpty))
        {
            try
            {
                searching = "Searching database....";
                HttpClient client = new HttpClient();
                var url = $"{baseUri}{roverName}/photos?sol={solNumber}&api_key={apiKey}";

                NasaPhotoModel? AllData = new NasaPhotoModel();
                AllData = await client.GetFromJsonAsync<NasaPhotoModel>(url);

                if (AllData != null && AllData.photos != null)
                {
                    images = AllData.photos
                            .Where(photo => !string.IsNullOrEmpty(photo.img_src))
                            .Select(photo => new Image { img_src = photo.img_src })
                            .ToList();

                    sampleResponse = AllData.photos.FirstOrDefault();

                    cameras = AllData.photos.Where(photo => photo.camera != null && (photo.camera.full_name != "Panoramic Camera" || photo.camera.full_name != "Navigation Camera"))
                                            .Select(photo => photo.camera)
                                            .ToList();

                    searching = string.Empty;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
                StateHasChanged();
            }
        }
    }
    private void ClearFields()
    {
        roverName = string.Empty;
        solNumber = string.Empty;
        roverNameEmpty = string.Empty;
        solNumberEmpty = string.Empty;
    }
}

